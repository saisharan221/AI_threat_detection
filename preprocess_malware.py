# scripts/preprocess_malware.py
import os
import pandas as pd
import pefile
import yara
import argparse

def extract_features_from_pe(file_path):
    # Placeholder feature extraction using pefile
    # In practice, you'd extract imports, sections, entropy, etc.
    try:
        pe = pefile.PE(file_path)
        # Example features (just placeholders)
        num_sections = len(pe.sections)
        entry_point = pe.OPTIONAL_HEADER.AddressOfEntryPoint
        # Add more sophisticated feature extraction here
        return {
            'file_path': file_path,
            'num_sections': num_sections,
            'entry_point': entry_point,
            # ... other features
        }
    except Exception:
        # If file isn't a valid PE, return None or handle it gracefully
        return None

def load_data(data_dir, label):
    features_list = []
    for fname in os.listdir(data_dir):
        fpath = os.path.join(data_dir, fname)
        if os.path.isfile(fpath):
            feats = extract_features_from_pe(fpath)
            if feats:
                feats['label'] = label
                features_list.append(feats)
    return pd.DataFrame(features_list)

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--malware_dir", type=str, default="data/malware", help="Path to malware samples")
    parser.add_argument("--benign_dir", type=str, default="data/malware/benign", help="Path to benign samples")
    parser.add_argument("--output", type=str, default="data/malware/processed_malware_data.csv", help="Output CSV file")
    args = parser.parse_args()

    malware_df = load_data(args.malware_dir, label=1)
    benign_df = load_data(args.benign_dir, label=0)
    combined_df = pd.concat([malware_df, benign_df], ignore_index=True)
    combined_df.to_csv(args.output, index=False)
    print(f"Processed data saved to {args.output}")
